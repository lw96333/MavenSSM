$(function () {
	var test = null;

	var loginUserId = -1;
	$.ajax({
		url:"../showLoginPersonalId",
		type:"POST",
		success:function(data){
			loginUserId = data.id
		}
	})
    $('#showSaleStall').bootstrapTable({
        url: '../showSaleStallPage',         //请求后台的URL（*）
        method: 'post',                      //请求方式（*）
        contentType: "application/x-www-form-urlencoded",//post请求的话就加上这个句话
        toolbar: '#toolbar',                //工具按钮用哪个容器
        striped: false,                      //是否显示行间隔色
        cache: false,                       //是否使用缓存，默认为true，所以一般情况下需要设置一下这个属性（*）
        pagination: true,                   //是否显示分页（*）
        sortable: true,                     //是否启用排序
        sortOrder: "asc",                   //排序方式
       // queryParams: oTableInit.queryParams,//传递参数（*）
        sidePagination: "server",           //分页方式：client客户端分页，server服务端分页（*）
        pageNumber:1,                       //初始化加载第一页，默认第一页
        pageSize: 5,                       //每页的记录行数（*）
        pageList: [5, 10, 20],        //可供选择的每页的行数（*）
        //search: true,                       //是否显示表格搜索，此搜索是客户端搜索，不会进服务端，所以，个人感觉意义不大
        strictSearch: true,
        showColumns: true,                  //是否显示所有的列
        showRefresh: true,                  //是否显示刷新按钮
        minimumCountColumns: 2,             //最少允许的列数
        clickToSelect: true,                //是否启用点击选中行
        //height: 500,                        //行高，如果没有设置height属性，表格自动根据记录条数觉得表格高度
        uniqueId: "id",                     //每一行的唯一标识，一般为主键列
        showToggle:true,                    //是否显示详细视图和列表视图的切换按钮
        cardView: false,                    //是否显示详细视图
        detailView: false,
        queryParams: function (params) { // 请求服务器数据时发送的参数，可以在这里添加额外的查询参数，返回false则终止请求

            return {
                pageSize: params.limit, // 每页要显示的数据条数 （params.limit）不可变表示开始数据位置 size可以变 对应后台的取值
                curPage: params.offset, // 每页显示数据的开始行号 （params.offset）不可变表示结束数据位置 cur可以变 对应后台的取值
                publishTime:$("#publishTime").val().trim(),
            }
        },
        responseHandler: function(data) {//请求得到参数处理 res是服务器返回的参数 （可以取任何变量名（和AJAX一样））
            console.log(data);
            return {
                "total": data.tolSize,//总条数 （"total"）不能变 插件特定解析字段 后面的值可根据实际情况做变化
                "rows": data.datas //数据  （"rows"）不能变 插件特定解析字段 后面的值可根据实际情况做变化
            };
        },
        columns: [ {
            field: 'value', //对象属性字段 与java对象类中字段一致
            title: '用户名',
            align: 'center',
            formatter: function indexFormatter(value, row, index) {//格式化数据 得到的数据需要做特殊的处理 formatter处理关键字
                //value 表示field 原本的值 一般会把这个值拿来做处理 （如 这个值是一个图片连接地址）
                //row  表示改行的数据对象，相当与 我们java中的一个对象
                //index 表示行数的索引 索引是从0开始
        		value = row.personalEntity.name;
                return value;
            }
        }, {
            field: 'value',
            title: '待售车位信息',
            align: 'center',
            formatter: function indexFormatter(value, row, index) {//格式化数据 得到的数据需要做特殊的处理 formatter处理关键字
                    //value 表示field 原本的值 一般会把这个值拿来做处理 （如 这个值是一个图片连接地址）
                    //row  表示改行的数据对象，相当与 我们java中的一个对象
                    //index 表示行数的索引 索引是从0开始
            		value = row.stallEntity.stalladdress+row.stallEntity.stallarea+row.stallEntity.stallnumber;
                    return value;
                }

        }, {
            field: 'value',
            title: '真实姓名',
            align: 'center',
            formatter: function indexFormatter(value, row, index) {//格式化数据 得到的数据需要做特殊的处理 formatter处理关键字
                //value 表示field 原本的值 一般会把这个值拿来做处理 （如 这个值是一个图片连接地址）
                //row  表示改行的数据对象，相当与 我们java中的一个对象
                //index 表示行数的索引 索引是从0开始
        		value = row.personalEntity.realname;
                return value;
            }

        },{
            field: 'time',
            title: '发布时间',
            align: 'center',

        },{
            field: 'value',
            title: '职业',
            align: 'center',
            formatter: function indexFormatter(value, row, index) {//格式化数据 得到的数据需要做特殊的处理 formatter处理关键字
                //value 表示field 原本的值 一般会把这个值拿来做处理 （如 这个值是一个图片连接地址）
                //row  表示改行的数据对象，相当与 我们java中的一个对象
                //index 表示行数的索引 索引是从0开始
        		value = row.personalEntity.professional;
                return value;
            }

        },{
            field: 'value',
            title: '信誉度',
            align: 'center',
            formatter: function indexFormatter(value, row, index) {//格式化数据 得到的数据需要做特殊的处理 formatter处理关键字
                //value 表示field 原本的值 一般会把这个值拿来做处理 （如 这个值是一个图片连接地址）
                //row  表示改行的数据对象，相当与 我们java中的一个对象
                //index 表示行数的索引 索引是从0开始
        		value = row.personalEntity.credibility;
                return value;
            }

        },{
            field: 'price',
            title: '出售价格',
            align: 'center',
//            formatter: function indexFormatter(value, row, index) {//格式化数据 得到的数据需要做特殊的处理 formatter处理关键字
//                //value 表示field 原本的值 一般会把这个值拿来做处理 （如 这个值是一个图片连接地址）
//                //row  表示改行的数据对象，相当与 我们java中的一个对象
//                //index 表示行数的索引 索引是从0开始
//        		value = row.rentEntity.price + '元/月' ;
//                return value;
//            }

        },{
            field: 'operation',
            title: '操作',
            align: 'center',
            formatter:addFunctionAlty,//表格中增加按钮
            events:{
                "click #btn_show":function(e,value,row,index) {
                	$.ajax({
                		url:"../showStallById",
                		type:"POST",
                		data:{stallId:row.stallid},
                		success:function(data){
                			//test = row.id;
               			 $("#stallInfo").html(row.stallEntity.stalladdress+row.stallEntity.stallarea+row.stallEntity.stallnumber);
            			 $("#userNames").html(row.personalEntity.name);
            			 $("#realName").html(row.personalEntity.realname);
            			 $("#professional").html(row.personalEntity.professional);
            			 $("#identitycard").html(row.personalEntity.identitycard);
            			 $("#credibility").html(row.personalEntity.credibility);
            			 $("#price").html(row.price);
                		}
                	})
                },
		        "click #btn_reserve":function(e,value,row,index) {
		        	$.ajax({
		        		url:"../showSaleStallById",
		        		type:"POST",
		        		data:{saleId:row.id},
		        		success:function(data){
				        	$.ajax({
				        		url:"../showStallById",
				        		type:"POST",
				        		data:{stallId:row.stallid},
				        		success:function(data){
				        			 self.location="message_board_purchase.jsp";
				        		}
				        	})
		        		}
		        	})

		        }
            }//给按钮注册事件  "click #btn_delete" 对应事件 和选择器
        }]
    });
    


    function addFunctionAlty(value, row, index) {
    	if(loginUserId == row.personalid){
            return [
            	
                "<button class='btn btn-info' id='btn_show' data-toggle='modal' data-target='#showSaleStallInfo'>查看</button>&nbsp;",
                "<button class='btn btn-success' id='btn_reserve' disabled='disabled'>预定</button>"
           ].join('');
    	}else{
    		return [
	    		"<button class='btn btn-info' id='btn_show' data-toggle='modal' data-target='#showSaleStallInfo'>查看</button>&nbsp;",
                "<button class='btn btn-success' id='btn_reserve'>预定</button>"
    		 ].join('');
    	}
    }
	$.ajax({
		url:"../update",
		data:{
			test:test
		}
	})

    })
